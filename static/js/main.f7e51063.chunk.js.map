{"version":3,"sources":["components/Calculator.js","components/KeyPadRow.js","components/Button.js","components/LargeButton.js","components/KeyPad.js","components/Screen/Result.js","components/Screen/ComputationScreen.js","components/Screen/Screen.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","state","equation","result","onButtonPress","event","pressedButton","target","innerHTML","clear","indexOf","evalResult","eval","Number","isInteger","toFixed","setState","err","alert","trim","substr","length","this","className","Component","KeyPadRow","props","children","Button","classes","type","push","join","onClick","LargeButton","KeyPad","Result","ComputationScreen","Screen","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f7e51063.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Screen from \"./Screen/Screen\";\nimport KeyPad from \"./KeyPad\";\n\nclass Calculator extends Component {\n  state = {\n    equation: \"\",\n    result: 0,\n  };\n\n  onButtonPress = (event) => {\n    let equation = this.state.equation;\n    const pressedButton = event.target.innerHTML;\n\n    if (pressedButton === \"C\") return this.clear();\n    else if (\n      (pressedButton >= \"0\" && pressedButton <= \"9\") ||\n      pressedButton === \".\"\n    ) {\n      equation += pressedButton;\n    } else if ([\"+\", \"-\", \"*\", \"/\", \"%\"].indexOf(pressedButton) !== -1) {\n      equation += \" \" + pressedButton + \" \";\n    } else if (pressedButton === \"=\") {\n      try {\n        const evalResult = eval(equation);\n        const result = Number.isInteger(evalResult)\n          ? evalResult\n          : evalResult.toFixed(2);\n        this.setState({ result });\n      } catch (err) {\n        alert(\"Invalid Mathematical Equation\");\n      }\n    } else {\n      equation = equation.trim();\n      equation = equation.substr(0, equation.length - 1);\n    }\n    this.setState({ equation: equation });\n  };\n\n  clear() {\n    this.setState({ equation: \" \", result: 0 });\n  }\n\n  render() {\n    return (\n      <main className=\"calculator\">\n        <Screen equation={this.state.equation} result={this.state.result} />\n\n        <KeyPad onButtonPress={this.onButtonPress} />\n      </main>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from \"react\";\n\nconst KeyPadRow = (props) => <div className=\"keypad-row\">{props.children}</div>;\n\nexport default KeyPadRow;\n","import React from \"react\";\n\nconst Button = (props) => {\n  const classes = [\"btn\"];\n\n  if (typeof props !== \"undefined\" && typeof props.type !== \"undefined\")\n    classes.push(\"btn-\" + props.type);\n  return (\n    <button className={classes.join(\" \")} onClick={props.onButtonPress}>\n      {props.children}\n    </button>\n  );\n};\nexport default Button;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst LargeButton = (props) => <Button type=\"large\" {...props} />;\n\nexport default LargeButton;\n","import React from \"react\";\n\nimport KeyPadRow from \"./KeyPadRow\";\nimport Button from \"./Button\";\nimport LargeButton from \"./LargeButton\";\nconst KeyPad = (props) => (\n  <section className=\"keypad\">\n    <KeyPadRow>\n      <Button type=\"primary\" onButtonPress={props.onButtonPress}>\n        C\n      </Button>\n      <Button type=\"primary\" onButtonPress={props.onButtonPress}>\n        &larr;\n      </Button>\n      <Button type=\"operator\" onButtonPress={props.onButtonPress}>\n        %\n      </Button>\n      <Button type=\"operator\" onButtonPress={props.onButtonPress}>\n        /\n      </Button>\n    </KeyPadRow>\n\n    <KeyPadRow>\n      <Button onButtonPress={props.onButtonPress}>9</Button>\n      <Button onButtonPress={props.onButtonPress}>8</Button>\n      <Button onButtonPress={props.onButtonPress}>7</Button>\n      <Button type=\"operator\" onButtonPress={props.onButtonPress}>\n        *\n      </Button>\n    </KeyPadRow>\n\n    <KeyPadRow>\n      <Button onButtonPress={props.onButtonPress}>6</Button>\n      <Button onButtonPress={props.onButtonPress}>5</Button>\n      <Button onButtonPress={props.onButtonPress}>4</Button>\n      <Button type=\"operator\" onButtonPress={props.onButtonPress}>\n        -\n      </Button>\n    </KeyPadRow>\n\n    <KeyPadRow>\n      <Button onButtonPress={props.onButtonPress}>3</Button>\n      <Button onButtonPress={props.onButtonPress}>2</Button>\n      <Button onButtonPress={props.onButtonPress}>1</Button>\n      <Button type=\"operator\" onButtonPress={props.onButtonPress}>\n        +\n      </Button>\n    </KeyPadRow>\n\n    <KeyPadRow>\n      <Button onButtonPress={props.onButtonPress}>0</Button>\n      <Button onButtonPress={props.onButtonPress}>.</Button>\n      <LargeButton onButtonPress={props.onButtonPress}>=</LargeButton>\n    </KeyPadRow>\n  </section>\n);\n\nexport default KeyPad;\n","import React from \"react\";\n\nconst Result = (props) => <div className=\"result\">{props.children}</div>;\n\nexport default Result;\n","import React from \"react\";\n\nconst ComputationScreen = (props) => (\n  <div className=\"comp-screen\">{props.children}</div>\n);\n\nexport default ComputationScreen;\n","import React from \"react\";\nimport Result from \"./Result\";\nimport ComputationScreen from \"./ComputationScreen\";\n\nconst Screen = (props) => (\n  <section className=\"screen\">\n    <Result>{props.result}</Result>\n    <ComputationScreen>{props.equation}</ComputationScreen>\n  </section>\n);\n\nexport default Screen;\n","import React from \"react\";\n\nimport \"./styles/styles.css\";\n\nimport Calculator from \"./components/Calculator\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on . Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}